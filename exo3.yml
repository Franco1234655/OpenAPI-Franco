openapi: 3.0.3
info:
  title: API User Profiles
  description: API de gestion des profils utilisateurs avec sous-schemas
  version: 1.0.0

paths:
  /users/{id}:
    get:
      summary: Récupère un utilisateur par son identifiant
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Profil utilisateur complet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /users:
    post:
      summary: Crée de nouveaux utilisateurs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUserProfile'
      responses:
        '201':
          description: Liste des utilisateurs créés avec identifiants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'

  /users/{id}/personalInfo:
    put:
      summary: Met à jour uniquement les informations personnelles
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInfo'
      responses:
        '200':
          description: Informations personnelles mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/address:
    put:
      summary: Met à jour uniquement l’adresse
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Adresse mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/preferences:
    put:
      summary: Met à jour uniquement les préférences
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preferences'
      responses:
        '200':
          description: Préférences mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Identifiant unique de l’utilisateur
      example: "USR12345"

  schemas:
    UserProfile:
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/Preferences'
      properties:
        identifier:
          type: string
          example: "USR12345"

    CreateUserProfile:
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/Preferences'

    PersonalInfo:
      type: object
      properties:
        first_name:
          type: string
          example: "Alice"
        last_name:
          type: string
          example: "Randria"
        birthdate:
          type: string
          format: date
          example: "1995-07-21"
        email:
          type: string
          format: email
          example: "alice@example.com"

    Address:
      type: object
      properties:
        address_street:
          type: string
          example: "12 Rue Principale"
        address_city:
          type: string
          example: "Antananarivo"
        address_country:
          type: string
          example: "Madagascar"
        address_postal_code:
          type: string
          example: "101"

    Preferences:
      type: object
      properties:
        needs_newsletter:
          type: boolean
          example: true
        language:
          type: string
          enum: [mg, fr, eng]
          example: fr
